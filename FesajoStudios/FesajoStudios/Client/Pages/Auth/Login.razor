@page "/login"
@using FesajoStudios.Shared.Request;
@inject IUserProxy UserProxy
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow-lg mt-5">
                <div class="card-body">
                    <div class="row">
                        <!-- Mitad izquierda con la imagen -->
                        <div class="col-md-12 text-center">
                            <img src="fesajoLogo.png" alt="Logo" class="img-fluid mb-3 with-border" style="max-width: 300px;" />
                            <h3>Fesajo Studios</h3>
                        </div>
                        <!-- Mitad derecha con el formulario de inicio de sesión -->
                        <div class="col-md-12">
                            <EditForm Model="LoginDtoRequest" OnValidSubmit="ValidLogin">
                                <DataAnnotationsValidator />
                                <div class="form-floating mb-3">
                                    <input type="text" class="form-control bg-light" id="floatingInput" @bind-value="LoginDtoRequest.User" placeholder="Usuario" autocomplete="off" style="background-color:gray;">
                                    <label for="floatingInput">Usuario</label>
                                    <ValidationMessage For="() => LoginDtoRequest.User"></ValidationMessage>
                                </div>
                                <div class="form-floating">
                                    <input type="password" class="form-control bg-light" id="floatingPassword" placeholder="Clave" @bind-value="LoginDtoRequest.Password" style="background-color:gray;" autocomplete=" off">
                                    <label for="floatingPassword">Clave</label>
                                    <ValidationMessage For="() => LoginDtoRequest.Password"></ValidationMessage>
                                </div>
                                <div class="d-grid gap-1 mt-4 mb-0">
                                    <button class="btn btn-primary" type="submit">Ingresar</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                <div class="card-footer text-center py-3">
                    <div class="small">
                        <NavLink class="nav-link" href="register">¿No tienes una cuenta? Regístrate</NavLink>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>

    body {
        background: #007BFF;
    }


    .card {
        border: 2px solid #007BFF; /* Borde azul */
    }

    .btn-primary {
        background-color: #007BFF; /* Fondo azul */
        border-color: #007BFF; /* Borde azul */
    }

        .btn-primary:hover {
            background-color: #0056b3; /* Cambio de color al pasar el ratón */
        }

    .with-border {
        border: 2px solid #000; /* Borde negro */
    }

    /* Estilo para los input con fondo gris claro */
    .bg-light {
        background-color: #f8f9fa !important; /* Color gris claro */
    }
</style>




@code {
    private LoginDtoRequest LoginDtoRequest { get; set; } = new LoginDtoRequest();
    public bool IsLoading { get; set; }

    private async Task ValidLogin()
    {
        try
        {
            IsLoading = true;
            var response = await UserProxy.Login(LoginDtoRequest);
            if (response.Success)
            {
                var auth = (AuthenticationService)AuthenticationStateProvider;
                await auth.Authenticate(response); 

                if (response.Roles.Contains("Administrador"))
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    NavigationManager.NavigateTo("/MoviesList");
                }

                
            }
            else
            {
                ToastService.ShowWarning(response.ErrorMessage!);
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }
}
