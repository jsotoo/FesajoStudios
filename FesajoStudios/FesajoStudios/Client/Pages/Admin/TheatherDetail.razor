@page "/theathers/detail/{Id:int}"
@inject IToastService ToastService
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
<h3>Sala @Id </h3>
<h3> Esta sala tiene capacidad de  @Theather.Capacity sillas</h3>


<br />

@if(ShowMovie ==true){
    <div class="row align-items-center alert alert-info">
        <div class="col-md-2">
            <!-- Add an image in the first column -->
            <img src="@Movie.UrlImage" alt="@Movie.Title" class="img-fluid" style="max-width: 150px; max-height: 200px;">
        </div>
        <div class="col-md-2">
            
            <!-- Add relevant text in the second column -->

            <p> <strong>Titulo:</strong> @Movie.Title </p>
            <p> <strong>Duración:</strong> @Movie.Duration</p>
            <p> <strong>Director:</strong> @Movie.Director </p>
            <p> <strong>Genero:</strong> @Movie.Genre</p>
            <p><strong>Clasificación:</strong> @Movie.Rating</p>
            <p><strong>Fecha de lanzamiento:</strong> @Movie.ReleaseDate</p>
    
            
        </div>

        @if (ShowButtonGenerateSeats == true )
        {
            Console.WriteLine(total);

            @if ( total == 0)
            {
                
                <div class="col-md-2">
                    <div style="display: inline-block;">
                        <p><strong>Esta función no tiene sillas generadas. Para generarlas hacer click al botón</strong></p>
                        <button class="btn btn-primary" @onclick="() => GenerateSeatsByFunction(selectedShowingId, Id)">Generar sillas por función</button>
                    </div>
                </div>
            }
            else if (total > Theather.Capacity)
            {
                <div class="col-md-2">
                    <div style="display: inline-block;">
                        <p><strong>Esta función tiene sillas generadas, pero se realizó una modificación siendo la cantidad de sillas menor. Para removerlas hacer click al botón</strong></p>
                        <button class="btn btn-danger" @onclick="() => RemoveSeatsByFunction(selectedShowingId, Id)">Generar sillas por función</button>
                    </div>
                </div>
            }
            else if (total < Theather.Capacity)
            {

                <div class="col-md-2">
                    <div style="display: inline-block;">
                        <p><strong>Esta función tiene sillas generadas, pero se realizó una modificación siendo la cantidad de sillas mayor que las generadas anteriormente. Para generarlas hacer click al botón</strong></p>
                        <button class="btn btn-primary" @onclick="() => GenerateSeatsByFunction(selectedShowingId, Id)">Generar sillas por función</button>
                    </div>
                </div>

            }



        }



    </div>

}



<div style="text-align: right;">
    <div style="display: inline-block;">
        <div class="cuadrado" style="background-color: lightgreen; width: 20px; height: 20px; text-align:right;"></div>
        <p>Asiento disponible</p>
    </div>
    <div style="display: inline-block;">
        <div class="cuadrado" style="background-color: gray; width: 20px; height: 20px; text-align:right;"></div>
        <p>Asiento ocupado/reservado</p>
    </div>
</div>



<br />




@if (ShowingsByTheather != null && ShowingsByTheather.Count >= 1)
{
    <label class="col-sm-2 form-label" for="movie">Funciones por sala:</label>
    <div class="col-sm-4">
        <InputSelect class="form-select" ValueChanged="@((int value) => { GetShowingsByTheather(value); selectedShowingId = value; })" ValueExpression="@(()=>valor)" Value="valor">
            <option value="">-Seleccione la función</option>
            @foreach (var showing in ShowingsByTheather)
            {
                <option value="@showing.Id">@($"{showing.Movie} | {showing.StartDate} - {showing.EndDate}")</option>
            }
        </InputSelect>
    </div>
}
else
{
  
    <p>No hay funciones disponibles</p>
}

@{

    total = 0;
}
 

@if(ShowSeats == true && Seats.Count > 0)
{
    <br />
    <br />
    <div class="rectangulo"></div>

    <br />
    <br />

    <div class="column-container">
        @foreach (var row in ChunkedSeats)
        {
            <div class="columna">
                <div class="contenedor-cuadricula">

                    @foreach (var seat in row)
                    {
                        @if (seat.SeatTypeId != 2)
                        {
                            <div class="cuadrado">
                                @seat.SeatCode
                            </div>
                        }
                        else
                        {
                            <div class="cuadrado-ocupado" id="cuadrado_@seat.SeatCode" @onclick="() => ShowReservation(seat.Id)">
                                @seat.SeatCode
                            </div>
                        }
                            total = total + 1;
                    }
                </div>
            </div>
        }
    </div>
} 



@if (Seats != null)
{

<CinemaModal ShowModal="@mostrarModal" TitleModal="Detalles de la silla">
    <div>
        <p>Silla reservada</p>

        <div class="cinema">
            <div class="row">
                    <p>  <strong>A Nombre:</strong> @Booking.Client </p>
                    <p> <strong>Función:</strong> @Booking.Showing </p>
                    <p><strong>Fecha de reserva:</strong> @Booking.ReservationDate </p>
                    <p><strong>Tipo de Reserva:</strong> @Booking.BookingType </p>
            </div>
        </div>
    </div>


</CinemaModal>



}

@if (ShowPercentage == true){
<div class="progress-overlay">
    <div class="progress-bar progress-bar-overlay" role="progressbar" style="width: @progressPercentage%;" aria-valuenow="@progressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
    <div style="text-align: center; margin-top: 10px;">
        <strong>Cargando...</strong> @progressPercentage%
    </div>
</div>
}



<br />
<br>

@code {
    [Parameter]
    public int Id { get; set; }
    public List<ShowingDtoResponse> ShowingsByTheather = new List<ShowingDtoResponse>();
    public List<SeatDtoResponse> Seats = new List<SeatDtoResponse>();
    public List<List<SeatDtoResponse>> ChunkedSeats = new List<List<SeatDtoResponse>>();
    public BookingDtoResponse Booking = new BookingDtoResponse();
    public TheatherDto Theather = new TheatherDto();
    public MovieDtoResponse Movie = new MovieDtoResponse();
    public bool ShowSeats { get; set; }
    public bool ShowMovie { get; set; }
    private int valor;
    private bool mostrarModal = false;
    public bool ShowButtonGenerateSeats { get; set; }
    public bool ShowPercentage { get; set; }
    private double progressPercentage;
    private int selectedShowingId;
    private int total = 0;



    protected async override Task OnInitializedAsync()
    {

        var responseTheathers = await HttpClient.GetFromJsonAsync<TheatherDto>($"api/Theathers/{Id}");


        if (responseTheathers != null)
        {
            Theather = responseTheathers;
        }


        var responseShowings = await HttpClient.GetFromJsonAsync<List<ShowingDtoResponse>>($"api/Showings/GetShowingsByTheatherId/{Id}");


        if (responseShowings != null)
        {
            ShowingsByTheather = responseShowings;
        }


    }


    private async void GetShowingsByTheather(int value)
    {

        var responseSeats = await HttpClient.GetFromJsonAsync<List<SeatDtoResponse>>($"api/Seats/GetSeatsByShowingId/{value}");
        var responseMovies = await HttpClient.GetFromJsonAsync<MovieDtoResponse> ($"api/Movies/GetMoviesByShowingId/{value}");

        if (responseSeats != null && responseSeats.Count > 0)
        {
            ShowSeats = true;
            Seats = responseSeats;

            await InvokeAsync(() => ChunkedSeats = Chunk(Seats, 2, 5));
            ShowButtonGenerateSeats = false;

            Console.WriteLine(total);



            StateHasChanged();


            if (total != Theather.Capacity)
            {
                ShowButtonGenerateSeats = true;
            }

        }
        else
        {
            ShowSeats = false;
            ShowButtonGenerateSeats = true;
            StateHasChanged();
        }

        if (responseMovies != null)
        {
            Movie = responseMovies;
            ShowMovie = true;
            StateHasChanged();

        }
        else
        {

            ShowMovie = false;
            StateHasChanged();
        }


    }

    private List<List<SeatDtoResponse>> Chunk(List<SeatDtoResponse> source, int rows, int columns)
    {
        int totalSeats = source.Count;
        int seatsPerBlock = totalSeats / (rows * columns);

        List<List<SeatDtoResponse>> result = new List<List<SeatDtoResponse>>();

        for (int row = 0; row < rows; row++)
        {
            List<SeatDtoResponse> rowSeats = new List<SeatDtoResponse>();

            for (int col = 0; col < columns; col++)
            {
                int startIndex = (row * columns + col) * seatsPerBlock;

                if (startIndex < totalSeats)
                {
                    List<SeatDtoResponse> chunk = source.Skip(startIndex).Take(seatsPerBlock).ToList();
                    rowSeats.AddRange(chunk);
                }
            }

            result.Add(rowSeats);
        }

        return result;
    }


    private async Task ShowReservation(int seatId)
    {

        var BookingResponse = await HttpClient.GetFromJsonAsync<BookingDtoResponse>($"api/Bookings/GetBySeatIdAndShowingId/{seatId}/{selectedShowingId}");

        if (BookingResponse != null)
        {
            AbrirModal();
            Booking = BookingResponse;
        }

    }

    private void AbrirModal()
    {
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
    }

    private async Task GenerateSeatsByFunction(int ShowingId, int TheatherId)
    {
        Console.WriteLine(ShowingId);

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Deseas agregar las {@Theather.Capacity} sillas? ",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ShowConfirmButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText= "Aceptar"

            });

        if (result.IsConfirmed)
        {
            var quantitySeats = Theather.Capacity;
            var totalSeatsGenerated = total;
            var valueToStart = 0;

            if (total == 0) 
            { 
                valueToStart = 0; 
                quantitySeats = quantitySeats + totalSeatsGenerated;
            }
            else //Cuando el total es mayor
            {
                valueToStart = totalSeatsGenerated;
                quantitySeats = quantitySeats - totalSeatsGenerated;
            }

            

            ShowPercentage = true;

            for (int i = valueToStart + 1; i <= valueToStart + quantitySeats; i++)
            {
                var Seat = new SeatDto()
                    {
                        SeatCode = $"S{Id}-{i}",
                        TheatherId = Id,
                        ShowingId = ShowingId,
                        SeatTypeId = 1

                    };

                await HttpClient.PostAsJsonAsync("api/Seats", Seat);

                progressPercentage = (double)i / quantitySeats * 100;
                StateHasChanged();
            }

            ToastService.ShowSuccess($"La creación de las sillas por la función {Movie.Title}");
            GetShowingsByTheather(selectedShowingId);

            ShowPercentage = false;

        }

    }

    private async Task RemoveSeatsByFunction(int ShowingId, int TheatherId)
    {

        var quantitySeats = Theather.Capacity;
        var totalSeatsGenerated = total;

        var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = $"Deseas remover las {totalSeatsGenerated - quantitySeats} sillas? ",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ShowConfirmButton = true,
                CancelButtonText = "Cancelar",
                ConfirmButtonText = "Aceptar"

            });

        if (result.IsConfirmed)
        {


            ShowPercentage = true;


            for (int i = totalSeatsGenerated - 1; i >= 0 && i >= quantitySeats; i--)
            {
                var seat = Seats[i];
                Console.WriteLine( seat.SeatCode);
                await HttpClient.DeleteAsync($"api/Seats/{seat.Id}");
                progressPercentage = (double)i / quantitySeats * 100;
                StateHasChanged();
            }


            ToastService.ShowSuccess($"La eliminación de las sillas por la función {Movie.Title} ha sido exitosa");
            GetShowingsByTheather(selectedShowingId);

            ShowPercentage = false;

        }
    }

  

   


}
