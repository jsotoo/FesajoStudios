@page "/showings/edit/{Id:int}"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService


<h3>Editar Función</h3>
<ShowingConfig Movies="Movies" Showing ="Showing" Theathers="Theathers" OnGrabar="Edit" />

@code {
    
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public ShowingDto Showing { get; set; } = new ShowingDto();

    [Parameter]
    public ICollection<MovieDto> Movies { get; set; } = new List<MovieDto>();

    [Parameter]
    public ICollection<TheatherDto> Theathers { get; set; } = new List<TheatherDto>();


    private async Task Edit()
    {
        try
        {
            await HttpClient.PutAsJsonAsync($"api/Showings/{Id}", Showing);
            ToastService.ShowInfo("Actualización de la función correctamente");
            NavigationManager.NavigateTo("/Showings");
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync($"api/Showings/{Id}");
            response.EnsureSuccessStatusCode();

            Showing = (await response.Content.ReadFromJsonAsync<ShowingDto>())!;

            var responseMovies = await HttpClient.GetFromJsonAsync<ICollection<MovieDto>>("api/Movies");
            if (responseMovies is not null)
                Movies = responseMovies;

            var responseTheathers = await HttpClient.GetFromJsonAsync<ICollection<TheatherDto>>("api/Theathers");
            if (responseTheathers is not null)
                Theathers = responseTheathers;
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

}
