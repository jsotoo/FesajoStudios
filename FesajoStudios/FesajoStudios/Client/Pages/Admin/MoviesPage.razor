@page "/movies"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject SweetAlertService Swal
@attribute [Authorize]

<PageTitle>Peliculas</PageTitle>

<h3>Peliculas</h3>

<button type="button" class="btn btn-primary" @onclick="Load"><i class="bi bi-arrow-clockwise me-1"></i>Cargar datos</button>
<NavLink class="btn btn-success" href="movies/create"><i class="bi bi-patch-plus me-1"></i>Agregar</NavLink>

@if (Mostrar)
{

    @if (Movies is null)
    {
        <p class="alert alert-warning">Cargando....</p>
    }
    else if (Movies.Count == 0)
    {
        <p class="alert alert-info">No se encontró datos</p>
    }
    else
    {
        <table class="table table-bordered table-hover mt-4 table-responsive">
            <thead>
                <tr class="table-primary">
                    <th class="text-center align-middle">Id</th>
                    <th class="text-center align-middle">Titulo</th>
                    <th class="text-center align-middle">Descripción</th>
                    <th class="text-center align-middle">Duración</th>
                    <th class="text-center align-middle">Clasificación</th>
                    <th class="text-center align-middle">Director</th>
                    <th class="text-center align-middle">Género</th>
                    <th class="text-center align-middle">Fecha de lanzamiento</th>
                    <th class="text-center align-middle">Imagen</th>
                    <th class="text-center align-middle">Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Movies)
                {
                    <tr>
                        <td class="text-center align-middle">@item.Id</td>
                        <td class="text-center align-middle">@item.Title</td>
                        <td class="text-wrap text-justify align-middle" style="max-width: 200px;">@item.Description</td>
                        <td class="text-center align-middle">@item.Duration</td>
                        <td class="text-center align-middle">@item.Rating</td>
                        <td class="text-center align-middle">@item.Director</td>
                        <td class="text-center align-middle">@item.Genre</td>
                        <td class="text-center align-middle">@item.ReleaseDate</td>
                        <td class="text-center align-middle">
                            @if (!string.IsNullOrEmpty(item.UrlImage))
                            {
                                <img src="@item.UrlImage" alt="@item.Title" style="width: 130px; border-radius: 5px; object-fit: cover;" />
                            }
                            else
                            {
                                <img src="/uploads/sinimagen.jpg" alt="Sin imagen" style="width: 130px; border-radius: 5px; object-fit: cover;" />
                            }
                        </td>
                        <td class="text-center align-middle">
                            <button class="btn btn-secondary me-2" @onclick="() => Edit(item.Id)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger" @onclick="() => Delete(item.Id)"><i class="bi bi-trash3-fill"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


    }

}

@code {

    public ICollection<MovieDtoResponse>? Movies { get; set; }

    public bool Mostrar { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            Mostrar = true;

            var response = await HttpClient.GetFromJsonAsync<ICollection<MovieDtoResponse>>("api/Movies");
            if (response != null)
            {
                Movies = response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"/movies/edit/{id}");
    }

    private async Task Delete(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions("Desea eliminar el registro?")
        {
            Title = "Eliminar",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true
        });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Movies/{id}");
            await Load();
        }
    }
}