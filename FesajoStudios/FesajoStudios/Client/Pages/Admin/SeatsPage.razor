@page "/seats"
@using Newtonsoft.Json;
@attribute [Authorize]

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService ToastService

<PageTitle>Sillas</PageTitle>

<h3>Sillas</h3>

<NavLink class="btn btn-success" href="seats/create"><i class="bi bi-patch-plus me-1"></i>Agregar</NavLink>
<button type="button" class="btn btn-primary" @onclick="Cargar"><i class="bi bi-arrow-clockwise me-1"></i>Cargar datos</button>

@if (Seats is null)
{
    <p class="alert alert-warning">Cargando....</p>
}
else if (Seats.Count == 0)
{
    <p class="alert alert-info">No se encontró datos</p>
}
else
{
    <table class="table table-bordered table-hover mt-4">
        <thead>
            <tr class="table-primary">
                <th>Id</th>
                <th>Número</th>
                <th>Tipo de silla</th>
                 <th>Función</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Seats)
            {
                <tr>

                    <td>@item.Id</td>
                    <td>@item.SeatCode</td>
                    <td>@item.SeatType</td>
                     <td>@item.Showing</td> 

                    <td>
                        <button class="btn btn-secondary" @onclick="() => Editar(item.Id)"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-danger" @onclick="() => Eliminar(item.Id)"><i class="bi bi-trash3-fill"></i></button>

                    </td>
                </tr>
            }
        </tbody>
    </table>
}



    <ModalSeatComponent IsVisible="@modalVisible">
    <!-- Contenido de la ventana modal, como un formulario de edición -->
    
        <EditForm Model="Seat" OnValidSubmit="Grabar">
            
                <!-- Contenido del modal -->
                <div class="modal-header">
                    <h4 class="modal-title">Detalles de la sala de cine</h4>
                    <button type="button" class="close" @onclick="CerrarModal">&times;</button>
                </div>

                <div class="row mb-3">
                    <div class="col">
                        <div class="col-sm-4">
                            <label class="col-sm-2 form-label" style="margin-left: 15px;" for="seatcode">Numero:</label>
                            <input type="text" id="seatcode" class="form-control" style="margin-left: 15px;" @bind-value="Seat.SeatCode" disabled />
                        </div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col">
                        <label class="col-sm-2 form-label" style="margin-left: 15px;" for="seatshowing">Función:</label>
                        <div class="col-sm-4">
                            <InputSelect @bind-Value="Seat.ShowingId" id="seatshowing" class="form-select" style="margin-left: 15px;" disabled>
                                <option>-Seleccione la función</option>
                                @foreach (var item in Showings)
                                {
                                    <option value="@item.Id">@item.Movie</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
   

                <div class="row mb-3">
                    <div class="col">
                        <label class="col-sm-2 form-label" style="margin-left: 15px;" for="seattype">Tipo:</label>
                        <div class="col-sm-4">
                            <InputSelect @bind-Value="Seat.SeatTypeId" id="seattype" class="form-select" style="margin-left: 15px;">
                                <option>-Seleccione el tipo de silla</option>
                                @foreach (var item in SeatsType)
                                {
                                    <option value="@item.Id">@item.Description</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>


                <button class="btn btn-secondary" style="margin-left: 15px;" @onclick="() => Edit(Seat.Id)">Editar</button>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                </div>
        </EditForm>
   

     </ModalSeatComponent>





@code {
    public ICollection<SeatDtoResponse>? Seats { get; set; }
    public SeatDtoResponse Seat { get; set; } = new SeatDtoResponse();

    public ICollection<SeatTypeDto> SeatsType { get; set; } = new List<SeatTypeDto>();

     public ICollection<ShowingDto> Showings { get; set; } = new List<ShowingDto>();


    public int Id { get; set; }

    private bool modalVisible = false;



    private async Task Cargar()
    {

        try
        {

            var response = await HttpClient.GetFromJsonAsync<ICollection<SeatDtoResponse>>("api/Seats");
            if (response != null)
            {
                Seats = response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async void Editar(int id)
    {
        var SeatSeleccionada = Seat;
        modalVisible = true;

        try
        {
            var response = await HttpClient.GetAsync($"api/Seats/{id}");
            response.EnsureSuccessStatusCode();

            var responseContent = await response.Content.ReadAsStringAsync();

            // Utilizar JsonConvert para deserializar la cadena JSON como una lista de objetos SeatDtoResponse
            List<SeatDtoResponse> seatResponses = (JsonConvert.DeserializeObject<List<SeatDtoResponse>>(responseContent))!;

            // Ahora, seatResponses contiene la lista de objetos deserializados

            // Puedes seleccionar el primer elemento de la lista o manejar la lista según sea necesario
            Seat = seatResponses.FirstOrDefault();

            // Otros pasos necesarios después de la deserialización...
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Manejar excepciones según sea necesario.
            Console.WriteLine($"Error durante la deserialización JSON: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
        }
    }



    private async Task Eliminar(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions("Desea eliminar el registro?")
            {
                Title = "Eliminar",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Seats/{id}");
            await Cargar();
        }
    }
    private void CerrarModal()
    {
        modalVisible = false;
    }

    private async Task Edit(int id)
    {
        try
        {
            await HttpClient.PutAsJsonAsync($"api/Seats/{id}", Seat);
            ToastService.ShowInfo("Actualización de la silla correctamente");
            NavigationManager.NavigateTo("/Seats");
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private async Task Grabar()
    {
    }

    protected async override void OnInitialized()
    {

        var responseSeatsType = await HttpClient.GetFromJsonAsync<ICollection<SeatTypeDto>>("api/SeatsType");
        if (responseSeatsType is not null)
            SeatsType = responseSeatsType;

        var responseShowings = await HttpClient.GetFromJsonAsync<ICollection<ShowingDto>>("api/Showings");
        if (responseShowings is not null)
            Showings = responseShowings;
    }

}
