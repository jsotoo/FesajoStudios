@page "/theathers"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService ToastService
@attribute [Authorize]
<PageTitle>Salas de cine</PageTitle>

<h3>Salas</h3>

<NavLink class="btn btn-success" href="theathers/create"><i class="bi bi-patch-plus me-1"></i>Agregar</NavLink>
<button type="button" class="btn btn-primary" @onclick="Load"><i class="bi bi-arrow-clockwise me-1"></i>Cargar datos</button>




@if (Mostrar){

    @if (Theathers is null)
    {
        <p class="alert alert-warning">Cargando....</p>
    }
    else if (Theathers.Count == 0)
    {
        <p class="alert alert-info">No se encontró datos</p>
    }
    else
    {


        @if (Theathers is not null)
        {
                    var theathersList = Theathers;
            <div class="container mb-5 gap-5">
                <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-5 justify-content-center">

                   @foreach (var theather in theathersList)
                    {
                        <div class="col mb-5">
                            <div class="card h-100 shadow-lg">
                                <div class="text-center">
                                    <img class="card-img-top border-dark border-1 movie-card" src="/uploads/theather.jpg" alt="@theather.Name" />
                                </div>
                                <div class="card-body p-4 text-center">
                                    <h5 class="fw-bolder">@theather.Name</h5>
                                    <span> Cantidad de sillas: @theather.Capacity</span>
                                </div>
                                <div class="card-footer">
                                    <div class="text-center">
                                        <a class="btn btn-outline-primary mt-auto" @onclick="() => ShowTheather(theather.Id)"><i class="bi bi-eye-fill"></i></a>
                                        <a class="btn btn-outline-primary mt-auto"><i class="bi bi-pen"></i></a>
                                        <a class="btn btn-outline-primary mt-auto"><i class="bi bi-trash"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        }




    }

}

@code {
    public ICollection<TheatherDto>? Theathers { get; set; }
    public ICollection<SeatDto> Seats { get; set; } = default!;
    private TheatherDto? theaterSeleccionado { get; set; }
    public bool Mostrar { get; set; }





    protected override async Task OnInitializedAsync()
    {
        await Load();
    }



    private void ShowTheather(int id)
    {
        NavigationManager.NavigateTo($"/theathers/detail/{id}");
    }



    private async Task Load()
    {
        try
        {
            Mostrar = true;
            var response = await HttpClient.GetFromJsonAsync<ICollection<TheatherDto>>("api/Theathers");
            if (response != null)
            {
                Theathers = response;
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"/theathers/edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions("Desea eliminar el registro?")
            {
                Title = "Eliminar",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Theathers/{id}");
            await Load();
        }
    }

    private async void SeleccionarTheater(TheatherDto theather)
    {
        theaterSeleccionado = theather;

        var response = await HttpClient.GetFromJsonAsync<ICollection<SeatDto>>($"api/Seats/{theather.Id}");
        if (response != null)
        {
            Seats = response;
        }

        // Notificar que ha cambiado el estado
        StateHasChanged();
    }




}
