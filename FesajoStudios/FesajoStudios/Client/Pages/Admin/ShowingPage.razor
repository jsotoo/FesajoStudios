@page "/showings"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IToastService ToastService
@attribute [Authorize]
<PageTitle>Funciones</PageTitle>

<h3>Funciones</h3>

<NavLink class="btn btn-success" href="showings/create"><i class="bi bi-patch-plus me-1"></i>Agregar</NavLink>
<button type="button" class="btn btn-primary" @onclick="Load"><i class="bi bi-arrow-clockwise me-1"></i>Cargar datos</button>


@if (Mostrar)
{

     @if (Showings is null)
    {
        <p class="alert alert-warning">Cargando....</p>
    }
    else if (Showings.Count == 0)
    {
        <p class="alert alert-info">No se encontró datos</p>
    }
    else
    {
        <table class="table table-bordered table-hover mt-4">
            <thead>
                <tr class="table-primary">
                    <th>Id</th>
                    <th>Fecha de inicio</th>
                    <th>Fecha fin</th>
                    <th>Pelicula</th>
                    <th>Sala</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Showings)
                {
                    <tr>
                            <td>@item.Id</td>
                            <td>@item.StartDate</td>
                            <td>@item.EndDate</td>
                            <td>@item.Movie</td>
                            <td>@item.Theather</td>
                        <td> 
                            <button class="btn btn-secondary" @onclick="() => Editar(item.Id)"><i class="bi bi-pencil"></i></button>
                            <button class="btn btn-danger" @onclick="() => Eliminar(item.Id)"><i class="bi bi-trash3-fill"></i></button>        
                         
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

}


@code {
    public ICollection<ShowingDto>? Showings { get; set; }
    public bool Mostrar { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        try
        {
            Mostrar = true;
            var response = await HttpClient.GetFromJsonAsync<ICollection<ShowingDto>>("api/Showings");
            if (response != null)
            {
                Showings = response;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError(ex.Message);
        }
    }

    private void Editar(int id)
    {
        NavigationManager.NavigateTo($"/showings/edit/{id}");
    }

    private async Task Eliminar(int id)
    {
        var result = await Swal.FireAsync(new SweetAlertOptions("Desea eliminar el registro?")
            {
                Title = "Eliminar",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        if (result.IsConfirmed)
        {
            await HttpClient.DeleteAsync($"api/Showings/{id}");
            await Load();
        }
    }




}
