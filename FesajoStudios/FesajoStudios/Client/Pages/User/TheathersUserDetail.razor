@page "/MoviesList/detail/theather/{Id:int}"
@using System.Security.Claims;
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SweetAlertService Swal 


<div style="text-align: right;">
    <div style="display: inline-block;">
        <div class="cuadrado" style="background-color: lightgreen; width: 20px; height: 20px; text-align:right;"></div>
        <p>Asiento disponible</p>
    </div>

    <div style="display: inline-block;">
        <div class="cuadrado" style="background-color: red; width: 20px; height: 20px; text-align:right;"></div>
        <p style="margin-right:10px">Asiento seleccionado</p>
    </div>

    <div style="display: inline-block;">
        <div class="cuadrado" style="background-color: gray; width: 20px; height: 20px; text-align:right;"></div>
        <p>Asiento ocupado</p>
    </div>
</div>


<br />

<div class="container">
    <div class="row">
        <!-- Columna de Datos de la Película -->
        <div class="col-md-4 alert alert-success">
            <h4>Datos de la película</h4>
            <div class="mb-3">
                <label class="form-label" for="startTime">Hora de inicio:</label>
                <span>@Showing.StartDate.ToString("HH:mm")</span>
            </div>
            <div class="mb-3">
                <label class="form-label" for="endTime">Hora fin:</label>
                <span>@Showing.EndDate.ToString("HH:mm")</span>
            </div>
            <div class="mb-3">
                <label class="form-label" for="movie">Película:</label>
                <span>@Showing.Movie</span>
            </div>
            <div class="mb-3">
                <label class="form-label" for="movie">Teatro:</label>
                <span>@Showing.Theather</span>
            </div>
        </div>


        @{
            totalCantidadAsientos = 0;
            totalAsientosElegidos = 0; 
        }


        <!-- Columna de Tickets -->
        <div class="col-md-4 alert alert-info">
            <h4>Información Tickets</h4>
            <div class="row">
                <div class="col-md-12">
                    @foreach (var item in Tickets)
                    {
                        int index = Tickets.IndexOf(item);
                        int cantidadAsientos = cantidadesAsientos.Count > index ? cantidadesAsientos[index] : 0;

                        <div class="mb-3">
                            <strong><label class="form-label" for="typeTicket">@item.TicketType</label></strong>

                            <div>
                                <label class="form-label" for="quantity">Ingrese la cantidad de sillas a reservar</label>
                                <div class="input-group">
                                    <input type="number" class="form-control form-control-sm" id="quantity" style="max-width: 80px;" min="0" @bind="@cantidadesAsientos[index]" />
                                    <span class="input-group-text">@item.Price</span>
                                </div>
                            </div>

                            @{
                                totalCantidadAsientos += item.Price * cantidadesAsientos[index];
                                totalAsientosElegidos += cantidadesAsientos[index];
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

      
        <!-- Columna de Totales -->
        <div class="col-md-4 alert alert-warning">
            <div>
                <strong>Total del costo a reservar: <span id="totalCantidadAsientos">@totalCantidadAsientos</span></strong>
            </div>
            <div>
                <strong>Total cantidad sillas ingresadas: <span id="totalCantidadAsientos">@totalAsientosElegidos</span></strong>
            </div>
            <div>
                <strong>Total Sillas seleccionadas: <span id="totalSillasSeleccionadas">@SillasSeleccionadas.Count</span></strong>
            </div>
            <br />
            <br />
            <!-- Botón de Reservar -->
            <button class="btn btn-primary" @onclick="Reservar">Reservar</button>
            <label id="mensajeErrorLabel" style="color: red;">@mensajeError</label>
        </div>
    </div>
</div>


@{
    total = 0;

}



<br />
<div class="rectangulo"></div>

<br />
<br />

<div class="column-container">
    @foreach (var row in ChunkedSeats)
    {
        <div class="columna">
            <div class="contenedor-cuadricula">
                @foreach (var seat in row)
                {
                    @if (seat.SeatTypeId != 2)
                    {
                        <div class="cuadrado @(SillasSeleccionadas.Contains(seat.SeatCode) ? "seleccionado" : "")" id="cuadrado_@seat.SeatCode" @onclick="() => ToggleSeleccion(seat.SeatCode)">
                            @seat.SeatCode

                        </div>
                    }
                    else
                    {
                       
                       total = total + 1;

                        <div class="cuadrado-ocupado" id="cuadrado_@seat.SeatCode" disabled>
                            @seat.SeatCode                      
                        </div>
                    }

                }
            </div>
        </div>
    }
</div>


@{
    int availableSeats = Seats.Count - total;
}

<h3>Sillas disponibles: @availableSeats</h3>

<!-- Etiqueta para mostrar las sillas seleccionadas -->
<label>Sillas seleccionadas: @string.Join(", ", SillasSeleccionadas)</label>

<!-- Botón de deshacer -->
<button class="btn btn-danger" @onclick="DeshacerSeleccion">Deshacer</button>

<br />
<br>



@code {
    [Parameter]
    public int Id { get; set; }

    private decimal totalCantidadAsientos = 0;
    private decimal totalAsientosElegidos = 0;
    private int total = 0;


    public List<SeatDtoResponse> Seats = new List<SeatDtoResponse>();
    public List<List<SeatDtoResponse>> ChunkedSeats = new List<List<SeatDtoResponse>>();
    public List<TicketDtoResponse> Tickets = new List<TicketDtoResponse>();
    public ShowingDtoResponse Showing = new ShowingDtoResponse();

    private List<string> SillasSeleccionadas { get; set; } = new List<string>();

    private string mensajeError = "";



    List<int> cantidadesAsientos = new List<int>();


    private void ToggleSeleccion(string seatCode)
    {
        if (SillasSeleccionadas.Contains(seatCode))
        {
            SillasSeleccionadas.Remove(seatCode);
        }
        else
        {
            SillasSeleccionadas.Add(seatCode);
        }
    }

    private void DeshacerSeleccion()
    {
        if (SillasSeleccionadas.Count > 0)
        {
            SillasSeleccionadas.RemoveAt(SillasSeleccionadas.Count - 1);
        }
    }


    private async Task Cargar()
    {
        try
        {

            var response = await HttpClient.GetFromJsonAsync<List<SeatDtoResponse>>($"api/Seats/GetSeatsByShowingId/{Id}");
            if (response != null)
            {
                Seats = response;
            }

            var responseTicket = await HttpClient.GetFromJsonAsync<List<TicketDtoResponse>>($"api/Tickets/GetTicketsByShowingId/{Id}");
            if (responseTicket != null)
            {
                Tickets = responseTicket;
            }

            var responseShowing = await HttpClient.GetFromJsonAsync<ShowingDtoResponse>($"api/Showings/{Id}");
            if (responseShowing != null)
            {
                Showing = responseShowing;
            }


        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Cargar();
        cantidadesAsientos = Enumerable.Repeat(0, Tickets.Count).ToList();
        await InvokeAsync(() => ChunkedSeats = Chunk(Seats, 2, 5));
    }

    private List<List<SeatDtoResponse>> Chunk(List<SeatDtoResponse> source, int rows, int columns)
    {
        int totalSeats = source.Count;
        int seatsPerBlock = totalSeats / (rows * columns);

        List<List<SeatDtoResponse>> result = new List<List<SeatDtoResponse>>();

        for (int row = 0; row < rows; row++)
        {
            List<SeatDtoResponse> rowSeats = new List<SeatDtoResponse>();

            for (int col = 0; col < columns; col++)
            {
                int startIndex = (row * columns + col) * seatsPerBlock;

                if (startIndex < totalSeats)
                {
                    List<SeatDtoResponse> chunk = source.Skip(startIndex).Take(seatsPerBlock).ToList();
                    rowSeats.AddRange(chunk);
                }
            }

            result.Add(rowSeats);
        }

        return result;
    }

    private async Task Reservar()
    {
        if (SillasSeleccionadas.Count != totalAsientosElegidos)
        {
            mensajeError = "La cantidad de sillas seleccionadas no coincide con la cantidad de asientos ingresados";
        }
        else
        {

            var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authenticationState.User;
            ICollection<int> seatsToBooking;



            if (user != null && user.Identity != null && user.Identity.IsAuthenticated)
            {
                var email = (user.FindFirst((ClaimTypes.Email)))!;
                var client = (await HttpClient.GetFromJsonAsync<ClientResponseDto>($"api/Clients/GetClientByEmail/byemail?email={email.Value}"))!;


                var newBookingId = await GenerateBooking(client); 
                seatsToBooking = await GetSeats();
                await GenerateBookingBySeats(seatsToBooking, newBookingId);
            }

            var result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Reserva generada correctamente. Puede visualizar su reserva en 'Mis Reservas' en el menú principal",
                Icon = SweetAlertIcon.Success,
            });

            if (result.IsConfirmed)
            {

                NavigationManager.NavigateTo("/MoviesList");
            }


        }


    }


    private async Task<ICollection<int>> GetSeats()
    {
        var seatsToBooking = await Task.Run(() =>
        {
            return Seats
                .Where(seat => SillasSeleccionadas.Contains(seat.SeatCode))
                .Select(seat => seat.Id)
                .ToList();
        });

        return seatsToBooking;
    }


    private bool IsValidJson(string json)
    {
        try
        {
            JsonDocument.Parse(json);
            return true;
        }
        catch (JsonException)
        {
            return false;
        }
    }

    public async Task<int> GenerateBooking(ClientResponseDto client)
    {
        var booking = new BookingDtoRequest()
            {
                ReservationDate = DateTime.Now,
                BookingTypeId = 1,
                ShowingId = Id,
                ClientId = client.Id,
                Total = totalCantidadAsientos

            };

        var response = await HttpClient.PostAsJsonAsync("api/Bookings", booking);
        var newBookingId = 0;
        if (response.IsSuccessStatusCode)
        {

            var bookingResponse = await response.Content.ReadFromJsonAsync<BookingDtoResponse>();

            if (bookingResponse != null)
            {
                newBookingId = bookingResponse.Id;
            }

        }
        else
        {

            Console.WriteLine($"Error al crear el booking. Código de estado: {response.StatusCode}");
        }

        return newBookingId;



    }

    public async Task GenerateBookingBySeats(ICollection<int> seatsToBooking, int newBookingId)
    {
        foreach (var seat in seatsToBooking)
        {

            var SeatXBooking = new SeatXBookingDtoRequest()
            {
                BookingId = newBookingId,
                SeatId = seat
            };

            await HttpClient.PostAsJsonAsync("api/SeatsXBookings", SeatXBooking);

            var seatStateChanged = new SeatDtoRequest()
            {
                SeatTypeId = 2
            };

            await HttpClient.PutAsJsonAsync($"api/Seats/PutBySeatType/{seat}", seatStateChanged);


        }
    }





}

   










