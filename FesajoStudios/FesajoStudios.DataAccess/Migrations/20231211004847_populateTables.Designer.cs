// <auto-generated />
using System;
using FesajoStudios.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FesajoStudios.DataAccess.Migrations
{
    [DbContext(typeof(FesajoStudiosDbContext))]
    [Migration("20231211004847_populateTables")]
    partial class populateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FesajoStudios.DataAccess.IdentityUserFesajoStudios", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATE");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FesajoStudios.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShowingId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<decimal>("Total")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShowingId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("FesajoStudios.Entities.BookingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BookingType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Confirmado",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pendiente",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cancelado",
                            State = true
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("DATE");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientTypeId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("FesajoStudios.Entities.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ClientType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cliente Normal",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cliente Especial",
                            State = true
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movie");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = " Elisa, muda desde que era un bebé, trabaja como limpiadora nocturna en un centro de investigación aeroespacial. Una noche, mientras está limpiando en un zona de alta seguridad, ve cómo llevan al laboratorio una cápsula con un extraño ser en su interior.",
                            Director = "Guillermo del toro",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            Genre = "Fantasia",
                            Rating = "16+",
                            ReleaseDate = new DateTime(2017, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Shape of water",
                            UrlImage = "/uploads/sow.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Más de una década después de los acontecimientos de 'Avatar', los Na'vi Jake Sully, Neytiri y sus hijos viven en paz en los bosques de Pandora hasta que regresan los hombres del cielo. Entonces comienzan los problemas que persiguen sin descanso a la familia Sully, que decide hacer un gran sacrificio para mantener a su pueblo a salvo y seguir ellos con vida.",
                            Director = "James Cameron",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            Genre = "Fantasia",
                            Rating = "13+",
                            ReleaseDate = new DateTime(2009, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Avatar",
                            UrlImage = "/uploads/avatar.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Un experto en computadoras descubre que su mundo es una simulación total creada con maliciosas intenciones por parte de la ciberinteligencia.",
                            Director = "Hermanas Wachowski",
                            Duration = new TimeSpan(0, 1, 33, 0, 0),
                            Genre = "Ciencia Ficción",
                            Rating = "16+",
                            ReleaseDate = new DateTime(1999, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Matrix",
                            UrlImage = "/uploads/Matrix.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Después de desembarcar en Normandía, en plena Segunda Guerra Mundial, unos soldados norteamericanos deben arriesgar sus vidas para salvar al soldado James Ryan, cuyos tres hermanos han muerto en la guerra.",
                            Director = "Steven Spielberg",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Genre = "Belico",
                            Rating = "18+",
                            ReleaseDate = new DateTime(1999, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Salvar al soldado Ryan",
                            UrlImage = "/uploads/Salvar_al_soldado_Ryan.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Description = "John Kramer conoce a una persona que le promete curarle el cáncer en una clínica de la Ciudad de México. Tras descubrir que todo era una estafa, se venga de los timadores secuestrándolos y obligándolos a participar en un juego perverso.",
                            Director = "Kevin Greutert",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            Genre = "Terror",
                            Rating = "18+",
                            ReleaseDate = new DateTime(2023, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Saw X",
                            UrlImage = "/uploads/Saw X.png"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Durante la Segunda Guerra Mundial, el teniente general Leslie Groves designa al físico J. Robert Oppenheimer para un grupo de trabajo que está desarrollando el Proyecto Manhattan, cuyo objetivo consiste en fabricar la primera bomba atómica.",
                            Director = "Christopher Nolan",
                            Duration = new TimeSpan(0, 3, 0, 0, 0),
                            Genre = "Suspenso",
                            Rating = "16+",
                            ReleaseDate = new DateTime(2023, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "Oppenheimer",
                            UrlImage = "/uploads/oppenheimer.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Description = "España, 1944, la joven Ofelia (Ivana Baquero) y su madre (Ariadna Gil) enferma llegan al sitio en el que se encuentra el nuevo esposo (Sergi López) de su madre, un sádico oficial del ejército que intenta calmar el levantamiento de una guerrilla.",
                            Director = "Guillermo del Toro",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Genre = "Fantasia Belica",
                            Rating = "18+",
                            ReleaseDate = new DateTime(2007, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            Title = "El laberinto del fauno",
                            UrlImage = "/uploads/LaberintoDelFauno.jpg"
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("SeatCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ShowingId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("TheatherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("ShowingId");

                    b.HasIndex("TheatherId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("FesajoStudios.Entities.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("SeatType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Disponible",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ocupado",
                            State = true
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.SeatXBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatXBooking");
                });

            modelBuilder.Entity("FesajoStudios.Entities.Showing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("TheatherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheatherId");

                    b.ToTable("Showing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2023, 12, 20, 15, 45, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 2,
                            StartDate = new DateTime(2023, 12, 20, 14, 10, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2023, 12, 2, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 3,
                            StartDate = new DateTime(2023, 12, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 2
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2023, 11, 16, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 2,
                            StartDate = new DateTime(2023, 11, 16, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 3
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2023, 12, 24, 22, 45, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 7,
                            StartDate = new DateTime(2023, 12, 24, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 2
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2023, 12, 16, 22, 30, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 5,
                            StartDate = new DateTime(2023, 12, 16, 20, 50, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 4
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2023, 12, 28, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 7,
                            StartDate = new DateTime(2023, 12, 28, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 3
                        },
                        new
                        {
                            Id = 7,
                            EndDate = new DateTime(2023, 12, 4, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 1,
                            StartDate = new DateTime(2023, 12, 4, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 4
                        },
                        new
                        {
                            Id = 8,
                            EndDate = new DateTime(2023, 12, 14, 17, 45, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 6,
                            StartDate = new DateTime(2023, 12, 14, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 1
                        },
                        new
                        {
                            Id = 9,
                            EndDate = new DateTime(2023, 12, 18, 1, 40, 0, 0, DateTimeKind.Unspecified),
                            MovieId = 6,
                            StartDate = new DateTime(2023, 12, 18, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            State = true,
                            TheatherId = 1
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.Theather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Theather");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 100,
                            Name = "Sala 1",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 100,
                            Name = "Sala 2",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 100,
                            Name = "Sala 3",
                            State = true
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 100,
                            Name = "Sala 4",
                            State = true
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Price")
                        .HasPrecision(11, 2)
                        .HasColumnType("decimal(11,2)");

                    b.Property<int>("ShowingId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShowingId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("Ticket");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 15000m,
                            ShowingId = 1,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Price = 8000m,
                            ShowingId = 1,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Price = 10000m,
                            ShowingId = 1,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 4,
                            Price = 15000m,
                            ShowingId = 2,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Price = 8000m,
                            ShowingId = 2,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            Price = 10000m,
                            ShowingId = 2,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            Price = 15000m,
                            ShowingId = 3,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Price = 8000m,
                            ShowingId = 3,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            Price = 10000m,
                            ShowingId = 3,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 10,
                            Price = 15000m,
                            ShowingId = 4,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Price = 8000m,
                            ShowingId = 4,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            Price = 10000m,
                            ShowingId = 4,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 13,
                            Price = 15000m,
                            ShowingId = 5,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Price = 8000m,
                            ShowingId = 5,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            Price = 10000m,
                            ShowingId = 5,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            Price = 15000m,
                            ShowingId = 6,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            Price = 8000m,
                            ShowingId = 6,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 18,
                            Price = 10000m,
                            ShowingId = 6,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 19,
                            Price = 15000m,
                            ShowingId = 7,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 20,
                            Price = 8000m,
                            ShowingId = 7,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            Price = 10000m,
                            ShowingId = 7,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 22,
                            Price = 15000m,
                            ShowingId = 8,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 23,
                            Price = 8000m,
                            ShowingId = 8,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 24,
                            Price = 10000m,
                            ShowingId = 8,
                            State = true,
                            TicketTypeId = 3
                        },
                        new
                        {
                            Id = 25,
                            Price = 15000m,
                            ShowingId = 9,
                            State = true,
                            TicketTypeId = 1
                        },
                        new
                        {
                            Id = 26,
                            Price = 8000m,
                            ShowingId = 9,
                            State = true,
                            TicketTypeId = 2
                        },
                        new
                        {
                            Id = 27,
                            Price = 10000m,
                            ShowingId = 9,
                            State = true,
                            TicketTypeId = 3
                        });
                });

            modelBuilder.Entity("FesajoStudios.Entities.TicketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TicketType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Adulto",
                            State = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Niño",
                            State = true
                        },
                        new
                        {
                            Id = 3,
                            Description = "Estudiante",
                            State = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FesajoStudios.Entities.Booking", b =>
                {
                    b.HasOne("FesajoStudios.Entities.BookingType", "BookingType")
                        .WithMany()
                        .HasForeignKey("BookingTypeId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Showing", "Showing")
                        .WithMany()
                        .HasForeignKey("ShowingId")
                        .IsRequired();

                    b.Navigation("BookingType");

                    b.Navigation("Client");

                    b.Navigation("Showing");
                });

            modelBuilder.Entity("FesajoStudios.Entities.Client", b =>
                {
                    b.HasOne("FesajoStudios.Entities.ClientType", "ClientType")
                        .WithMany()
                        .HasForeignKey("ClientTypeId")
                        .IsRequired();

                    b.Navigation("ClientType");
                });

            modelBuilder.Entity("FesajoStudios.Entities.Seat", b =>
                {
                    b.HasOne("FesajoStudios.Entities.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Showing", "Showing")
                        .WithMany()
                        .HasForeignKey("ShowingId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Theather", "Theather")
                        .WithMany()
                        .HasForeignKey("TheatherId")
                        .IsRequired();

                    b.Navigation("SeatType");

                    b.Navigation("Showing");

                    b.Navigation("Theather");
                });

            modelBuilder.Entity("FesajoStudios.Entities.SeatXBooking", b =>
                {
                    b.HasOne("FesajoStudios.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatId")
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("FesajoStudios.Entities.Showing", b =>
                {
                    b.HasOne("FesajoStudios.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.Theather", "Theather")
                        .WithMany()
                        .HasForeignKey("TheatherId")
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Theather");
                });

            modelBuilder.Entity("FesajoStudios.Entities.Ticket", b =>
                {
                    b.HasOne("FesajoStudios.Entities.Showing", "Showing")
                        .WithMany()
                        .HasForeignKey("ShowingId")
                        .IsRequired();

                    b.HasOne("FesajoStudios.Entities.TicketType", "TicketType")
                        .WithMany()
                        .HasForeignKey("TicketTypeId")
                        .IsRequired();

                    b.Navigation("Showing");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FesajoStudios.DataAccess.IdentityUserFesajoStudios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FesajoStudios.DataAccess.IdentityUserFesajoStudios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FesajoStudios.DataAccess.IdentityUserFesajoStudios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FesajoStudios.DataAccess.IdentityUserFesajoStudios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
